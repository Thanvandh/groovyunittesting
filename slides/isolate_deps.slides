h1. Isolating Dependencies

Unit test is concerned with testing classes and methods in isolation from their surrounding system.

Groovy's dynamic nature provides many approaches to isolate the code under test from it's dependencies.

h1. The as Operator

Groovy's as operator allows you to use an Expendo, a Closure or a Map to implement an interface.

|{width:25%}. Closure | Used to implement a single method interface |
|{width:25%}. Map | Used to implement multiple method interfaces |

The resulting proxy can then be passed to a Java class.

h1. Closure Coercion Example

:code code/test/ClosureTest.groovy[class=code-medium]

Implements the @EventListener@ interface using the @listener@ closure.

h1. Map Coercion Example

First we build and coerce the map into an Execution interface:

:code code/test/MapCoercionTest.groovy[map class=code-medium]

bq. @Execution@ is a ZK interface that encapsulate the HTTP servlet request.

h1. Map Coercion Example (part 2)

Then we use the map in the code under test:

:code code/test/MapCoercionTest.groovy[test class=code-medium]

bq. Map coercion allows you to provide partial interface implementation.

h1. Hard to Isolate Cases

These cases are hard to test:

* Dependency created as part of the code under test
* Making calls to static methods
* Making calls to final methods
* Using final classes

None of these are easy to address in normal unit testing scenarios

h1. JMockit

* Runs as a JVM agent
* Replaces any method or constructor at run time.
* Redefines classes as they are loaded
* Requires Java 5

h1. Getting JMockit to Work

# Configure JVM to launch JMockit as an agent
# Write the mock methods(s)
# Tell JMockit what class to augment
# Exercise code under test

h1. Configuring JVM

Pass @-javaagent:/path/to/jmockit.jar@ as an argument to the JVM.

:code code/test/compile.xml[jmockit class=code-medium]

You may also need to add @jmockit-asm2.jar@ to the classpath.

h1. Write Instance Mock Method

:code code/test/MockDesktopUtil.java[class=code-medium]

h1. Write Static Mock Method

:code code/test/MockPath.java[class=code-medium]

h1. Redefine Methods

:code code/test/JMockitRedef.groovy[intest class=code-medium]

A good place to redefine the methods is in the @@Before@ method:

:code code/test/JMockitRedef.groovy[before class=code-medium]

h1. Test Code

:code code/test/JMockitRedef.groovy[test class=code-medium]

Variable @instance@ was created in the @@Before@ method.

h1. Mock Method Rules

* Must match the signature of the methods to replace
* Must *not* introduce new methods
* Can introduce static variables



